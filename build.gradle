// Apply the versions plugin to check for module dependency updates.
plugins {
    id 'com.github.ben-manes.versions' version '0.43.0'
}

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

dependencies {
    ext.commonsVersion = '2.11.0'
    ext.mailVersion = '2.1.0'
    ext.activationVersion = '2.1.0'
    ext.jsonVersion = '20220924'
    ext.junitVersion = '4.13.2'

    implementation "commons-io:commons-io:$commonsVersion"
    implementation "jakarta.activation:jakarta.activation-api:$activationVersion"
    implementation "jakarta.mail:jakarta.mail-api:$mailVersion"
    implementation "org.json:json:$jsonVersion"

    // Use JUnit test framework.
    testImplementation "junit:junit:$junitVersion"
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:deprecation'
    options.deprecation = true
}

version = '2.2'

// Define the main class for the application
mainClassName = 'com.github.friedrichfroebel.occar.Gui'

// Target at least Java 8.
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Default build does not include the needed libraries.
// Therefore the jar option should be used for releases.
jar {
    from configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        attributes (
            'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '),
            'Main-Class': mainClassName
        )
    }
}

// Check code style.
apply plugin: 'checkstyle'
checkstyle {
    toolVersion '10.4'
}
tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
        html.stylesheet resources.text.fromFile('config/checkstyle/checkstyle.xsl')
    }
}

// Use the PMD plugin.
apply plugin: 'pmd'
tasks.withType(Pmd) {
    ignoreFailures = true
    consoleOutput = true
}

wrapper {
    gradleVersion = '7.5.1'
}

// Update the version files.
task versionFiles {
    def fileJava = new File('src/main/java/com/github/friedrichfroebel/occar/config/Version.java')
    fileJava.createNewFile()
    fileJava.text = "package com.github.friedrichfroebel.occar.config;\n\n" +
            "public final class Version {\n\n" +
            "    public static final String VERSION = \"$version\";\n\n}"

    def fileRoot = new File('version')
    fileRoot.createNewFile()
    fileRoot.text = "$version"
}
tasks.getByName('run').dependsOn versionFiles
tasks.getByName('jar').dependsOn versionFiles
